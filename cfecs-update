#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Fill in Google style docstrings here
"""

import sys
import argparse
import pprint
import logging
import cfecs

def print_usage():
    print ("Usage: \n"
           "   cfecs-update aws-region ecs_cluster ecs_service")

if __name__ == '__main__':

    PARSER = argparse.ArgumentParser(description='Codefresh ECS Deploy')

    PARSER.add_argument('region_name', help="AWS Region, ex. us-east-1")
    PARSER.add_argument('cluster_name', help="ECS Cluster Name")
    PARSER.add_argument('service_name', help="ECS Service Name")

    IMAGE_GROUP = PARSER.add_argument_group()
    IMAGE_GROUP.add_argument('-i', '--image-name', action='store', dest='image_name', \
        help='Image Name in ECS Task Definition to set new tag')
    IMAGE_GROUP.add_argument('-t', '--image-tag', action='store', dest='image_tag', \
        help='Tag for the image')

    ARGS_WAIT_GROUP = PARSER.add_mutually_exclusive_group()
    ARGS_WAIT_GROUP.add_argument('--wait', action='store_true', dest='wait', default=True, \
        help='Wait for deployment to complete (default)')
    ARGS_WAIT_GROUP.add_argument('--no-wait', action='store_false', dest='wait', \
        help='No Wait for deployment to complete')

    PARSER.add_argument('--kill-running-tasks', action='store', dest='kill_tasks', default=False, \
        help='De-register current task definition & stop all running tasks related to service')
    PARSER.add_argument('--timeout', action='store', dest='timeout', default=cfecs.DEPLOY_TIMEOUT, \
        help='deployment wait timeout (default 900s)')
    PARSER.add_argument( \
        '--max-failed', action='store', dest='max_failed', default=cfecs.MAX_FAILED_TASKS, \
        help='max failed tasks to consider deployment as failed (default 4)')
    PARSER.add_argument('--debug', action='store_true', dest='debug', \
        help='show debug messages')


    ARGS = PARSER.parse_args()
    try:
        if ARGS.debug:
            cfecs.init_log(logging.DEBUG)
        RESPONSE = cfecs.update_service(ARGS.cluster_name, ARGS.service_name, \
            region_name=ARGS.region_name, wait=ARGS.wait, deploy_timeout=ARGS.timeout, \
            max_failed=ARGS.max_failed, image_name=ARGS.image_name, image_tag=ARGS.image_tag)

        if not RESPONSE.get("status") or RESPONSE["status"] in (cfecs.C_FAIL, cfecs.C_TIMEOUT):
            cfecs.log.error("ERROR: %s", pprint.pformat(RESPONSE))
            sys.exit(1)

        cfecs.log.debug(pprint.pformat(RESPONSE))
        cfecs.log.info("ECS Deploy completed with status %s", RESPONSE.get("status"))

    except Exception as err:
        cfecs.log.error("ERROR: %s", err.message)
        sys.exit(1)



